# _GO_HEATING_POINT TRAVEL_SPEED=<value>
[gcode_macro _GO_HEATING_POINT]
variable_default_heating_point: [5, 0, 30] # if error while calculating
variable_default_travel_speed: 50.0 # mm/s
gcode:
    {% if printer.toolhead.axis_minimum.x and printer.toolhead.axis_minimum.y %}
        {% set hp = [printer.toolhead.axis_minimum.x + 5, printer.toolhead.axis_minimum.y, 30] %}
    {% else %}
        {% set hp = default_heating_point %}
    {% endif %}
    {% if printer.toolhead.position.x != hp[0] or printer.toolhead.position.y != hp[1] or printer.toolhead.position.z != hp[2] %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        SAVE_GCODE_STATE NAME=gcodeState__GO_HEATING_POINT
        SMART_HOME
        G90
        G0 X{hp[0]} Y{hp[1]} Z{hp[2]} F{travel_speed*60}
        RESTORE_GCODE_STATE NAME=gcodeState__GO_HEATING_POINT
    {% endif %}
description: "Go to a pre-defined point to heat up the nozzle and the bed, it will be [min_x + 5, min_y, 30]."

# _CLEAN_NOZZLE_INITIAL TRAVEL_SPEED=<value> RETRACTION_LENGHT=<value> RETRACTION_SPEED=<value> PURGE_LENGHT=<value> PURGE_SPEED=<value> AXIS="<value>"
[gcode_macro _CLEAN_NOZZLE_INITIAL]
variable_default_axis: "Y" # axis where perform the cleaning
variable_default_start_point: [5, 30, 0.4] # if error while calculating
variable_default_end_position: 180.0 # if error while calculating
variable_default_offset: 0.4 # mm if error while calculating
variable_default_travel_speed: 50.0 # mm/s
variable_default_retraction_lenght: 3.5 # mm
variable_default_retraction_speed: 40.0 # mm/s
variable_default_purge_lenght: 50.0 # mm
variable_default_purge_speed: 2.0 # mm/s
gcode:
    {% if printer[printer.toolhead.extruder].target > printer.configfile.settings[printer.toolhead.extruder].min_extrude_temp %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        {% set retraction_lenght = params.RETRACTION_LENGHT|default(default_retraction_lenght)|float %}
        {% set retraction_speed = params.RETRACTION_SPEED|default(default_retraction_speed)|float %}
        {% set purge_lenght = params.PURGE_LENGHT|default(default_purge_lenght)|float %}
        {% set purge_speed = params.PURGE_SPEED|default(default_purge_speed)|float %}
        {% set axis = params.AXIS|default(default_axis) %}
        {% if printer.configfile.settings[printer.toolhead.extruder].nozzle_diameter == null %}
            {% set offset = default_offset %}
        {% else %}
            {% set offset = printer.configfile.settings.extruder.nozzle_diameter %}
        {% endif %}
        SAVE_GCODE_STATE NAME=gcodeState__CLEAN_NOZZLE_INITIAL
        _GO_HEATING_POINT TRAVEL_SPEED={travel_speed} # used as a start point for the cleaning process
        {% if printer[printer.toolhead.extruder].temperature < printer.configfile.settings[printer.toolhead.extruder].min_extrude_temp %}
            M117 Waiting for extruder to heat up...
            M109 S{printer[printer.toolhead.extruder].target}
        {% endif %}
        {% if printer[printer.toolhead.extruder].can_extrude %} # just to be sure
            M117 Purging extruder...
            G91
            G1 E{purge_lenght} F{purge_speed*60} # purge	
            G1 E-{retraction_lenght} F{retraction_speed*60} # retract a little
            G92 E0
            # depend on the position of the toolhead
            {% if printer.toolhead.position.x != null and printer.toolhead.axis_minimum.y != null and printer.toolhead.axis_maximum.y !=null %}
                {% set bed_size_y = printer.toolhead.axis_maximum.y - printer.toolhead.axis_minimum.y %}
                {% set start_point = [printer.toolhead.position.x, bed_size_y * 0.3, 0.4] %}
                {% set end_position = bed_size_y * 0.9 %}
            {% else %}
                {% set start_point = default_start_point %}
                {% set end_position = default_end_position %}
            {% endif %}
            _CLEANING_LINE TRAVEL_SPEED={travel_speed} OFFSET={offset} START_POINT_X={start_point[0]} START_POINT_Y={start_point[1]} START_POINT_Z={start_point[2]} END_POSITION={end_position} AXIS={axis}
            G0 Z2 F{travel_speed*15} # go up a little
        {% else %}
            RESPOND TYPE=error MSG="Cannot clean nozzle, extruder cannot extrude."
        {% endif %}
        RESTORE_GCODE_STATE NAME=gcodeState__CLEAN_NOZZLE_INITIAL
    {% else %}
        RESPOND TYPE=error MSG="Cannot clean nozzle, extruder is not hot enough."
    {% endif %}
description: "Clean nozzle at height 0.4 mm purging it and then travel in a straight line."

# _CLEANING_LINE TRAVEL_SPEED=<value> OFFSET=<value> START_POINT=<value> END_POS=<value> AXIS="<value>"
[gcode_macro _CLEANING_LINE]
variable_default_offset: 0.4
variable_default_travel_speed: 50.0
gcode:
    {% set offset = params.OFFSET|default(default_offset)|float %}
    {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
    {% set start_point = [ params.START_POINT_X|float, params.START_POINT_Y|float, params.START_POINT_Z|float ] %}
    {% set end_position = params.END_POSITION|float %}
    {% set axis = params.AXIS %}
    {% if start_point != [0.0, 0.0, 0.0] and end_position != 0.0  and axis != null %}
        SAVE_GCODE_STATE NAME=gcodeState__CLEANING_LINE
        SMART_HOME
        G90
        # go to the start point
        G0 X{start_point[0]} Y{start_point[1]} F{travel_speed*60}
        G0 Z{start_point[2]} F{travel_speed*15} # slow down the z movement by a factor of 4
        {% if axis == "X" %}
            G0 X{end_position} F{travel_speed*60} # go to the end position on X coordinate
            G0 Y{start_point[1]+offset} F{travel_speed*60} # offset on Y
            G0 X{start_point[0]} F{travel_speed*60} # go back to the start point
        {% elif axis == "Y" %}
            G0 Y{end_position} F{travel_speed*60} # go to the end position on Y coordinate
            G0 X{start_point[0]+offset} F{travel_speed*60} # offset on X
            G0 Y{start_point[1]} F{travel_speed*60} # go back to the start point
        {% endif %}
        RESTORE_GCODE_STATE NAME=gcodeState__CLEANING_LINE
    {% else %}
        RESPOND TYPE=error MSG="Cannot clean nozzle, missing parameters."
    {% endif %}
description: "Clean nozzle by moving in a straight line and coming back. (if the parameter are: <travel_speed>, 0.4, [1, 2, 3], 4, "X", the trajectory will be [1, 2, ~]->[1, 2, 3]->[4, 2, 3]->[4, 2.4, 3]->[1, 2.4, 3])"

# PRESENT_PARTS TRAVEL_SPEED=<value>
[gcode_macro _PRESENT_PARTS]
variable_default_travel_speed: 50.0 # mm/s
variable_default_present_position_y: 180.0 # mm 
gcode:
    {% if printer.toolhead.homed_axes == "xyz" or printer.toolhead.homed_axes == "xzy" or printer.toolhead.homed_axes == "yxz" or printer.toolhead.homed_axes == "yzx"  or printer.toolhead.homed_axes == "zxy" or printer.toolhead.homed_axes == "zyx" %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        SAVE_GCODE_STATE NAME=gcodeState__PRESENT_PARTS
        G90
        G0 X0 Y0 F{travel_speed*60} # go to origin
        {% if printer.toolhead.axis_minimum.y != null and printer.toolhead.axis_maximum.y !=null %}
            {% set bed_size_y = printer.toolhead.axis_maximum.y - printer.toolhead.axis_minimum.y %}
            {% set present_position_y = bed_size_y * 0.85 %}
        {% else %}
            {% set present_position_y = default_present_position_y %}
        {% endif %}
        G0 Y{present_position_y} F{travel_speed*60} # present parts
        RESTORE_GCODE_STATE NAME=gcodeState__PRESENT_PARTS
    {% else %}
        RESPOND TYPE=error MSG="Cannot present parts, toolhead not homed on all axis."
    {% endif %}
description: "Present parts to the user."

# _CLIENT_EXTRUDE LENGTH=<value> SPEED=<value>
[gcode_macro _CLIENT_EXTRUDE]
variable_use_fw_retract: False
variable_unretract: 1.0
variable_speed_unretract: 35
gcode:
  {% set use_fw_retract = (use_fw_retract|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(unretract)|float %}
  {% set speed = params.SPEED|default(speed_unretract) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}
description: Extrudes, if the extruder is hot enough

# _CLIENT_RETRACT LENGTH=<value> SPEED=<value>
[gcode_macro _CLIENT_RETRACT]
variable_retract: 1.0
variable_speed_retract: 35
gcode:
  {% set length = params.LENGTH|default(retract)|float %}
  {% set speed = params.SPEED|default(speed_retract) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

# _TOOLHEAD_PARK_PAUSE_CANCEL X=<value> Y=<value> Z=<value> E=<value> Z_MIN=<value>
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_use_custom_pos: False
variable_custom_park_x: 0.0
variable_custom_park_y: 0.0
variable_custom_park_dz: 2.0
variable_speed_hop: 15
# variable_speed_move: 50 # if not defined, it will use the recover_velocity
gcode:
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = use_custom_pos|lower == 'true' %}
  {% set park_dz        = params.Z|default(custom_park_dz)|abs %}
  {% set sp_hop         = speed_hop * 60 %}
  {% set sp_move        = speed_move|default(velocity) * 60 %}
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  _CLIENT_RETRACT LENGTH={params.E}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
description: Retracts, if the extruder is hot enough