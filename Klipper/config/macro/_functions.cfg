# _GO_IF_HOMED X=<value> Y=<value> Z=<value> SPEED=<value> MODE="absolute" or "relative"
[gcode_macro _GO_IF_HOMED]
variable_default_mode: "absolute"
variable_default_speed: 50.0 # mm/s
gcode:
  {% if params.X or params.Y or params.Z %}
    {% if params.X %}
      {% set x = params.X|float %}
    {% else %}
      {% set x = "~" %}
    {% endif %}
    {% if params.Y %}
      {% set y = params.Y|float %}
    {% else %}
      {% set y = "~" %}
    {% endif %}
    {% if params.Z %}
      {% set z = params.Z|float %}
    {% else %}
      {% set z = "~" %}
    {% endif %}
    {% if printer.toolhead.homed_axes == "xyz" or printer.toolhead.homed_axes == "xzy" or printer.toolhead.homed_axes == "yxz" or printer.toolhead.homed_axes == "yzx"  or printer.toolhead.homed_axes == "zxy" or printer.toolhead.homed_axes == "zyx" %}
        {% set speed = params.SPEED|default(default_speed)|float %}
        {% set mode = params.MODE|default(default_mode) %}
        {% if mode == "relative" or mode == "absolute" %}
            SAVE_GCODE_STATE NAME=gcodeState__GO_IF_HOMED
            {% if mode == "relative" %}
              G91
            {% else %}
              G90
            {% endif %}
            {% if x != "~" and y != "~" and z != "~" %}
              G0 X{x} Y{y} Z{z} F{speed*60}
            {% elif x != "~" and y != "~" %}
              G0 X{x} Y{y} F{speed*60}
            {% elif x != "~" and z != "~" %}
              G0 X{x} Z{z} F{speed*60}
            {% elif y != "~" and z != "~" %}
              G0 Y{y} Z{z} F{speed*60}
            {% elif x != "~" %}
              G0 X{x} F{speed*60}
            {% elif y != "~" %}
              G0 Y{y} F{speed*60}
            {% elif z != "~" %}
              G0 Z{z} F{speed*60}
            {% endif %}
            RESTORE_GCODE_STATE NAME=gcodeState__GO_IF_HOMED
        {% else %}
            RESPOND TYPE=error MSG="_GO_IF_HOMED Invalid mode, must be 'absolute' or 'relative'."
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG="_GO_IF_HOMED Cannot go to [{x}, {y}, {z}], toolhead not homed on all axis."
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="_GO_IF_HOMED Missing parameters."
  {% endif %}
description: "Go to a specific point if the toolhead is homed on all axis. Otherwise do nothing."

# _GO X=<value> Y=<value> Z=<value> SPEED=<value> MODE="absolute" | "relative"
[gcode_macro _GO]
gcode:
  SMART_HOME
  _GO_IF_HOMED {rawparams}
description: "Go to a specific point. If the toolhead in not homed on all axis, it will home before."


# _EXTRUDE_IF_HOT LENGTH=<value> SPEED=<value>
[gcode_macro _EXTRUDE_IF_HOT]
gcode:
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if params.LENGTH and params.SPEED %}
        {% set lenght = params.LENGTH|float %}
        {% set speed = params.SPEED|float|abs %}
        SAVE_GCODE_STATE NAME=gcodeState__EXTRUDE
        M83
        G1 E{lenght} F{speed*60}
        RESTORE_GCODE_STATE NAME=gcodeState__EXTRUDE
      {% else %}
        {% if printer.configfile.settings.firmware_retraction %}
          {% if params.LENGTH and params.LENGTH|float < 0 %}
            G10
          {% else %}
            G11
          {% endif %}
        {% else %}
          RESPOND TYPE=error MSG="_EXTRUDE_IF_HOT Missing parameters"
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=error MSG="_EXTRUDE_IF_HOT {printer.toolhead.extruder} not hot enough"
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="_EXTRUDE_IF_HOT No extruder defined"
  {% endif %}
description: "Extrude a specific amount of filament. For firmware_retraction do not set the speed and use a positive value for extrusion and negative for retraction."

# _RETRACT_IF_HOT LENGTH=<value> SPEED=<value>
[gcode_macro _RETRACT_IF_HOT]
gcode:
  {% if params.LENGTH and params.SPEED %}
    {% set lenght = params.LENGTH|float|abs %}
    {% set speed = params.SPEED|float|abs %}
    _EXTRUDE_IF_HOT LENGTH=-{lenght} SPEED={speed}
  {% else %}
    {% if printer.configfile.settings.firmware_retraction %}
      {% if params.LENGTH and params.LENGTH|float < 0 %}
        _EXTRUDE_IF_HOT
      {% else %}
        _EXTRUDE_IF_HOT LENGTH=-1
      {% endif %}
    {% else %}
      RESPOND TYPE=error MSG="_RETRACT_IF_HOT Missing parameters"
    {% endif %}
  {% endif %}
description: "Retract a specific amount of filament. For firmware_retraction do not set the speed and use a negative value for extrusion and positive for retraction."

# _WAIT_TEMP_EXTRUDE LENGTH=<value> SPEED=<value>
[gcode_macro _WAIT_TEMP_EXTRUDE]
gcode:
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].target > printer.configfile.settings[printer.toolhead.extruder].min_extrude_temp %}
      {% if not printer[printer.toolhead.extruder].can_extrude %}
        M117 Waiting for extruder to heat up...
        M109 S{printer[printer.toolhead.extruder].target}
      {% endif %}
      _EXTRUDE_IF_HOT {rawparams}
    {% else %}
      RESPOND TYPE=error MSG="_WAIT_TEMP_EXTRUDE Target temperature for {printer.toolhead.extruder} lower than min_extrude_temp"
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="_WAIT_TEMP_EXTRUDE No extruder defined"
  {% endif %}
description: "Wait for the extruder to reach the target temperature and then extrude a specific amount of filament."

# _WAIT_TEMP_RETRACT LENGTH=<value> SPEED=<value>
[gcode_macro _WAIT_TEMP_RETRACT]
gcode:
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].target > printer.configfile.settings[printer.toolhead.extruder].min_extrude_temp %}
      {% if not printer[printer.toolhead.extruder].can_extrude %}
        M117 Waiting for extruder to heat up...
        M109 S{printer[printer.toolhead.extruder].target}
      {% endif %}
      _RETRACT_IF_HOT {rawparams}
    {% else %}
      RESPOND TYPE=error MSG="_WAIT_TEMP_RETRACT Target temperature for {printer.toolhead.extruder} lower than min_extrude_temp"
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="_WAIT_TEMP_RETRACT No extruder defined"
  {% endif %}
description: "Wait for the extruder to reach the target temperature and then retract a specific amount of filament."


# _GO_HEATING_POINT TRAVEL_SPEED=<value>
[gcode_macro _GO_HEATING_POINT]
variable_default_heating_point: [5, 0, 30] # if error while calculating
variable_default_travel_speed: 50.0 # mm/s
gcode:
    {% if printer.toolhead.axis_minimum.x and printer.toolhead.axis_minimum.y %}
        {% set hp = [printer.toolhead.axis_minimum.x + 5, printer.toolhead.axis_minimum.y, 30] %}
    {% else %}
        {% set hp = default_heating_point %}
    {% endif %}
    {% if printer.toolhead.position.x != hp[0] or printer.toolhead.position.y != hp[1] or printer.toolhead.position.z != hp[2] %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        _GO X={hp[0]} Y={hp[1]} SPEED={travel_speed*60}
        _GO Z={hp[2]} SPEED={travel_speed*30}
    {% endif %}
description: "Go to a pre-defined point to heat up the nozzle and the bed, it will be [min_x + 5, min_y, 30]."

# _CLEAN_NOZZLE_INITIAL TRAVEL_SPEED=<value> RETRACTION_LENGHT=<value> RETRACTION_SPEED=<value> PURGE_LENGHT=<value> PURGE_SPEED=<value> AXIS="<value>"
[gcode_macro _CLEAN_NOZZLE_INITIAL]
variable_default_axis: "Y" # axis where perform the cleaning
variable_default_start_point: [5, 30, 0.4] # if error while calculating
variable_default_end_position: 180.0 # if error while calculating
variable_default_offset: 0.4 # mm if error while calculating
variable_default_travel_speed: 50.0 # mm/s
variable_default_retraction_lenght: 3.5 # mm
variable_default_retraction_speed: 40.0 # mm/s
variable_default_purge_lenght: 50.0 # mm
variable_default_purge_speed: 2.0 # mm/s
gcode:
  {% if printer[printer.toolhead.extruder].target > printer.configfile.settings[printer.toolhead.extruder].min_extrude_temp %}
    {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
    {% set retraction_lenght = params.RETRACTION_LENGHT|default(default_retraction_lenght)|float %}
    {% set retraction_speed = params.RETRACTION_SPEED|default(default_retraction_speed)|float %}
    {% set purge_lenght = params.PURGE_LENGHT|default(default_purge_lenght)|float %}
    {% set purge_speed = params.PURGE_SPEED|default(default_purge_speed)|float %}
    {% set axis = params.AXIS|default(default_axis) %}
    {% if printer.configfile.settings[printer.toolhead.extruder].nozzle_diameter == null %}
      {% set offset = default_offset %}
    {% else %}
      {% set offset = printer.configfile.settings.extruder.nozzle_diameter %}
    {% endif %}
    SAVE_GCODE_STATE NAME=gcodeState__CLEAN_NOZZLE_INITIAL
    _GO_HEATING_POINT TRAVEL_SPEED={travel_speed} # used as a start point for the cleaning process
    M117 Purging extruder...
    _WAIT_TEMP_EXTRUDE LENGTH={purge_lenght} SPEED={purge_speed}
    _WAIT_TEMP_RETRACT LENGTH={retraction_lenght} SPEED={retraction_speed}
    # depend on the position of the toolhead
    {% if printer.toolhead.position.x != null and printer.toolhead.axis_minimum.y != null and printer.toolhead.axis_maximum.y !=null %}
      {% set bed_size_y = printer.toolhead.axis_maximum.y - printer.toolhead.axis_minimum.y %}
      {% set start_point = [printer.toolhead.position.x, bed_size_y * 0.3, 0.4] %}
      {% set end_position = bed_size_y * 0.9 %}
    {% else %}
      {% set start_point = default_start_point %}
      {% set end_position = default_end_position %}
    {% endif %}
    _CLEANING_LINE TRAVEL_SPEED={travel_speed} OFFSET={offset} START_POINT_X={start_point[0]} START_POINT_Y={start_point[1]} START_POINT_Z={start_point[2]} END_POSITION={end_position} AXIS={axis}
    _GO_IF_HOMED Z=2 MODE="relative"
    RESTORE_GCODE_STATE NAME=gcodeState__CLEAN_NOZZLE_INITIAL
  {% else %}
    RESPOND TYPE=error MSG="Cannot clean nozzle, extruder is not hot enough."
  {% endif %}
description: "Clean nozzle at height 0.4 mm purging it and then travel in a straight line."

# _CLEANING_LINE TRAVEL_SPEED=<value> OFFSET=<value> START_POINT_X=<valuie> START_POINT_Y=<valuie> START_POINT_Z=<valuie> END_POSITION=<value> AXIS="<value>"
[gcode_macro _CLEANING_LINE]
variable_default_offset: 0.4
variable_default_travel_speed: 50.0
gcode:
  {% if params.START_POINT_X and params.START_POINT_Y and params.START_POINT_Z and params.END_POSITION and params.AXIS %}
    {% set offset = params.OFFSET|default(default_offset)|float %}
    {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
    {% set start_point = [ params.START_POINT_X|float, params.START_POINT_Y|float, params.START_POINT_Z|float ] %}
    {% set end_position = params.END_POSITION|float %}
    {% set axis = params.AXIS %}
      SAVE_GCODE_STATE NAME=gcodeState__CLEANING_LINE
      SMART_HOME
      G90
      # go to the start point
      G0 X{start_point[0]} Y{start_point[1]} F{travel_speed*60}
      G0 Z{start_point[2]} F{travel_speed*15} # slow down the z movement by a factor of 4
      {% if axis == "X" %}
        G0 X{end_position} F{travel_speed*60} # go to the end position on X coordinate
        G0 Y{start_point[1]+offset} F{travel_speed*60} # offset on Y
        G0 X{start_point[0]} F{travel_speed*60} # go back to the start point
      {% elif axis == "Y" %}
        G0 Y{end_position} F{travel_speed*60} # go to the end position on Y coordinate
        G0 X{start_point[0]+offset} F{travel_speed*60} # offset on X
        G0 Y{start_point[1]} F{travel_speed*60} # go back to the start point
      {% endif %}
      RESTORE_GCODE_STATE NAME=gcodeState__CLEANING_LINE
  {% else %}
      RESPOND TYPE=error MSG="Cannot clean nozzle, missing parameters."
  {% endif %}
description: "Clean nozzle by moving in a straight line and coming back. (if the parameter are: <travel_speed>, 0.4, [1, 2, 3], 4, "X", the trajectory will be [1, 2, ~]->[1, 2, 3]->[4, 2, 3]->[4, 2.4, 3]->[1, 2.4, 3])"

# PRESENT_PARTS TRAVEL_SPEED=<value>
[gcode_macro _PRESENT_PARTS]
variable_default_travel_speed: 50.0 # mm/s
variable_default_present_position_y: 180.0 # mm 
gcode:
    {% if printer.toolhead.homed_axes == "xyz" or printer.toolhead.homed_axes == "xzy" or printer.toolhead.homed_axes == "yxz" or printer.toolhead.homed_axes == "yzx"  or printer.toolhead.homed_axes == "zxy" or printer.toolhead.homed_axes == "zyx" %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        SAVE_GCODE_STATE NAME=gcodeState__PRESENT_PARTS
        G90
        G0 X0 Y0 F{travel_speed*60} # go to origin
        {% if printer.toolhead.axis_minimum.y != null and printer.toolhead.axis_maximum.y !=null %}
            {% set bed_size_y = printer.toolhead.axis_maximum.y - printer.toolhead.axis_minimum.y %}
            {% set present_position_y = bed_size_y * 0.85 %}
        {% else %}
            {% set present_position_y = default_present_position_y %}
        {% endif %}
        G0 Y{present_position_y} F{travel_speed*60} # present parts
        RESTORE_GCODE_STATE NAME=gcodeState__PRESENT_PARTS
    {% else %}
        RESPOND TYPE=error MSG="Cannot present parts, toolhead not homed on all axis."
    {% endif %}
description: "Present parts to the user."