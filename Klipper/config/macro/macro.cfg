
# SMART_HOME
[gcode_macro SMART_HOME]
gcode:
    {% if printer.toolhead.homed_axes == "" or printer.toolhead.homed_axes == null %}
        G28 
    {% elif printer.toolhead.homed_axes == "x" %}
        G28 YZ
    {% elif printer.toolhead.homed_axes == "y" %}
        G28 XZ
    {% elif printer.toolhead.homed_axes == "z" %}
        G28 XY
    {% elif printer.toolhead.homed_axes == "xy" or printer.toolhead.homed_axes == "yx" %}
        G28 Z
    {% elif printer.toolhead.homed_axes == "xz" or printer.toolhead.homed_axes == "zx" %}
        G28 Y
    {% elif printer.toolhead.homed_axes == "yz" or printer.toolhead.homed_axes == "zy"%}
        G28 X
    {% endif %}
description: "Home all axis not yet homed."

# GO_SAFE_POSITION H=0/1
[gcode_macro GO_SAFE_POSITION]
variable_x: 110.0 # mm
variable_y: 110.0 # mm
variable_z: 80.0 # mm
variable_travel_speed: 50.0 # mm/s # z travel speed will be half of this
variable_default_h: 1
gcode:
  {% set h = params.H|default(default_h)|int %}
  {% if h == 1 or h == 0 %}
    {% if h == 1 %}
      SMART_HOME
    {% endif %}
    _GO_IF_HOMED X={x} Y={y} F={travel_speed*60}
    _GO_IF_HOMED Z={z} F={travel_speed*30}
  {% else %}
    RESPOND TYPE=error MSG="Invalid value for H. It should be 0 or 1."
  {% endif %}
description: "Go to safe position. H=1 will home all axis before moving."

# PAUSE X=<value> Y=<value> DZ=<value> E=<value> Z_MIN=<value> IDLE_TIMEOUT=<value> SPEED_MOVE=<value>
[gcode_macro PAUSE]
variable_retract_speed: 40

variable_default_park_x: 0
variable_default_park_y: 0
variable_default_park_dz: 20
variable_default_retract_length: 3.5
variable_default_park_z_min: 50
variable_default_idle_timeout: 600 # if [ilde_timeout] timeout: option is not defined in printer.cfg, it will use this value
variable_default_speed_move: 100 # if [pause_resume] recover_velocity: option is not defined in printer.cfg, it will use this value
gcode:
  {% if printer.configfile.settings.pause_resume %}

    # gettings parameters
    {% set park_x = params.X|default(default_park_x)|float %}
    {% set park_y = params.Y|default(default_park_y)|float %}
    {% set park_dz = params.DZ|default(default_park_dz)|float %}
    {% set retract_length = params.E|default(default_retract_length)|float|abs %}
    {% set park_z_min = params.Z_MIN|default(default_park_z_min)|float %}
    {% set idle_timeout = params.IDLE_TIMEOUT|default(printer.configfile.settings.idle_timeout.timeout)|default(default_idle_timeout)|int|abs %}
    {% set speed_move = params.SPEED_MOVE|default(printer.configfile.settings.pause_resume.recover_velocity)|default(default_speed_move)|float %}

    # calculating parameters
    {% set park_z = [ ([ printer.toolhead.position.z + park_dz, printer.toolhead.axis_maximum.z ]|min), park_z_min ]|max %}
    {% set speed_move_z = [speed_move, printer.configfile.settings.printer.max_z_velocity]|min %}

    # getting data to be restored
    {% if printer.configfile.settings.idle_timeout %}
      {% set idle_timeout_to_be_restored = printer["gcode_macro _IDLE_TIMEOUT"].timeout %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_timeout_to_be_restored VALUE={idle_timeout_to_be_restored}
    {% endif %}
    

    # executing pause
    SAVE_GCODE_STATE NAME=gcodeState_PAUSE
    PAUSE_BASE
    _RETRACT_IF_HOT LENGTH={retract_length} SPEED={retract_speed}
    _GO_IF_HOMED Z={park_z} F={speed_move_z*60}
    _GO_IF_HOMED X={park_x} Y={park_y} F={speed_move*60}

    # setting idle timeout
    {% if printer.configfile.settings.idle_timeout %}
      {% if idle_timeout > 0 %}
        SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
      {% else %}
        _DISABLE_IDLE_TIMEOUT
      {% endif %}
    {% endif %}

    # activating advanced resume
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_length VALUE={retract_length}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_speed VALUE={retract_speed/2}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=return_speed_move VALUE={speed_move}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=gcode_state_available VALUE=True

  {% else %}
    RESPOND TYPE=error MSG="Pause/Resume feature not enabled in printer.cfg."
  {% endif %}
description: "Pause the actual running print and park the toolhead. Set IDLE_TIMEOUT to 0 to disable it."
rename_existing: PAUSE_BASE

# RESUME VELOCITY=<value>
[gcode_macro RESUME]
variable_idle_timeout_to_be_restored: -1
variable_extrude_length: -1
variable_extrude_speed: -1
variable_return_speed_move: -1
variable_gcode_state_available: False
gcode:
  {% if printer.configfile.settings.pause_resume %}
    {% if printer.pause_resume.is_paused %}
      {% if printer.configfile.settings.idle_timeout and idle_timeout_to_be_restored > 0 %}
        SET_IDLE_TIMEOUT TIMEOUT={idle_timeout_to_be_restored}
      {% endif %}
      {% if extrude_length > 0  and extrude_speed > 0 %}
        _EXTRUDE_IF_HOT LENGTH={extrude_length} SPEED={extrude_speed}
      {% endif %}
      {% if params.VELOCITY %}
        {% set return_speed_move = params.VELOCITY|float %}=
      {% endif %}
      {% if return_speed_move > 0 %}
        RESUME_BASE VELOCITY={return_speed_move}
      {% else %}
        RESUME_BASE
      {% endif %}
      {% if gcode_state_available %}
        RESTORE_GCODE_STATE NAME=gcodeState_PAUSE_RESUME
      {% endif %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_timeout_to_be_restored VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_length VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_speed VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=return_speed_move VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=gcode_state_available VALUE=False
    {% else %}
      RESPOND TYPE=error MSG="Printer is not paused."
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="Pause/Resume feature not enabled in printer.cfg."
  {% endif %}
description: "Resume the actual running print."
rename_existing: RESUME_BASE

# CLEAR_PAUSE SUPPRESS_NOT_PAUSED_ERROR="True" or any other value for False
[gcode_macro CLEAR_PAUSE]
gcode:
  {% if printer.configfile.settings.pause_resume %}
    {% if printer.pause_resume.is_paused %}

      {% if printer.configfile.settings.idle_timeout and printer["gcode_macro RESUME"].idle_timeout_to_be_restored > 0 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer["gcode_macro RESUME"].idle_timeout_to_be_restored}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_timeout_to_be_restored VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_length VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_speed VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=return_speed_move VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=gcode_state_available VALUE=False
      CLEAR_PAUSE_BASE
    {% else %}
      {% set suppress_not_paused_error = True if params.SUPPRESS_NOT_PAUSED_ERROR == "True" else False %}
      {% if not suppress_not_paused_error %}
        RESPOND TYPE=error MSG="Printer is not paused."        
      {% endif %}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="Pause/Resume feature not enabled in printer.cfg."
  {% endif %}
description: "Clear the pause state without resuming the print."
rename_existing: CLEAR_PAUSE_BASE

# CANCEL_PRINT X=<value> Y=<value> DZ=<value> E=<value> Z_MIN=<value> SPEED_MOVE=<value>
[gcode_macro CANCEL_PRINT]
variable_retract_speed: 40

variable_default_park_x: 0
variable_default_park_y: 0
variable_default_park_dz: 20
variable_default_retract_length: 3.5
variable_default_park_z_min: 50
variable_default_speed_move: 100 # if [pause_resume] recover_velocity: option is not defined in printer.cfg, it will use this value
gcode:
  # gettings parameters
  {% set park_x = params.X|default(default_park_x)|float %}
  {% set park_y = params.Y|default(default_park_y)|float %}
  {% set park_dz = params.DZ|default(default_park_dz)|float %}
  {% set retract_length = params.E|default(default_retract_length)|float|abs %}
  {% set park_z_min = params.Z_MIN|default(default_park_z_min)|float %}
  {% set speed_move = params.SPEED_MOVE|default(printer.configfile.settings.pause_resume.recover_velocity)|default(default_speed_move)|float %}

  # calculating parameters
  {% set park_z = [ ([ printer.toolhead.position.z + park_dz, printer.toolhead.axis_maximum.z ]|min), park_z_min ]|max %}
  {% set speed_move_z = [speed_move, printer.configfile.settings.printer.max_z_velocity]|min %}
  

  # executing cancel print
  _RETRACT_IF_HOT LENGTH={retract_length} SPEED={retract_speed}
  _GO_IF_HOMED Z={park_z} F={speed_move_z*60}
  _GO_IF_HOMED X={park_x} Y={park_y} F={speed_move*60}

  CLEAR_PAUSE SUPPRESS_NOT_PAUSED_ERROR="True"
  
  TURN_OFF_HEATERS
  M84
  M107
  CANCEL_PRINT_BASE
description: "Cancel the actual running print"
rename_existing: CANCEL_PRINT_BASE


# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}


