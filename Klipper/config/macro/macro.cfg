
# SMART_HOME
[gcode_macro SMART_HOME]
gcode:
    {% if printer.toolhead.homed_axes == "" or printer.toolhead.homed_axes == null %}
        G28 
    {% elif printer.toolhead.homed_axes == "x" %}
        G28 YZ
    {% elif printer.toolhead.homed_axes == "y" %}
        G28 XZ
    {% elif printer.toolhead.homed_axes == "z" %}
        G28 XY
    {% elif printer.toolhead.homed_axes == "xy" or printer.toolhead.homed_axes == "yx" %}
        G28 Z
    {% elif printer.toolhead.homed_axes == "xz" or printer.toolhead.homed_axes == "zx" %}
        G28 Y
    {% elif printer.toolhead.homed_axes == "yz" or printer.toolhead.homed_axes == "zy"%}
        G28 X
    {% endif %}
description: "Home all axis not yet homed."

# GO_SAFE_POSITION H=0/1
[gcode_macro GO_SAFE_POSITION]
variable_x: 110.0 # mm
variable_y: 110.0 # mm
variable_z: 80.0 # mm
variable_default_h: 1
gcode:
  {% set h = params.H|default(default_h)|int %}
  {% if h == 1 or h == 0 %}
    {% if h == 1 %}
      SMART_HOME
    {% endif %}
    _GO_IF_HOMED X={x} Y={y}
    _GO_IF_HOMED Z={z}
  {% else %}
    RESPOND TYPE=error MSG="Invalid value for H. It should be 0 or 1."
  {% endif %}
description: "Go to safe position. H=1 will home all axis before moving (and it is the default behaviour)."

# PAUSE X=<value> Y=<value> DZ=<value> E=<value> Z_MIN=<value> IDLE_TIMEOUT=<value> SPEED=<value>
[gcode_macro PAUSE]
gcode:
  {% if printer.configfile.settings.pause_resume %}
    {% set defaults = printer["gcode_macro _VARIABLE_DEFAULTS"] %}

    # getting parameters
    {% set park_x = params.X|default(defaults.park_position[0])|float %}
    {% set park_y = params.Y|default(defaults.park_position[1])|float %}
    {% set park_dz = params.DZ|default(defaults.pause_dz)|float %}
    {% set retract_length = params.E|default(defaults.retract_length)|float|abs %}
    {% set retract_speed = defaults.retract_speed|float %}
    {% set park_z_min = params.Z_MIN|default(defaults.park_position[2])|float %}


    # calculating parameters
    {% set park_z = [ ([ printer.toolhead.position.z + park_dz, printer.toolhead.axis_maximum.z ]|min), park_z_min ]|max %}


    # change idle timeout value and restore feature
    {% if printer.configfile.settings.idle_timeout and params.IDLE_TIMEOUT %}
      {% set idle_timeout_old = printer["gcode_macro _IDLE_TIMEOUT"].timeout %}
      {% set idle_timeout_old_state = not printer["gcode_macro _IDLE_TIMEOUT"].disable_idle_timeout %} # if disable_idle_timeout is False, idle_timeout is enabled, so True, and vice versa
      {% set idle_timeout_new = params.IDLE_TIMEOUT|int %}

      {% if idle_timeout_new == 0 %}
        RESPOND TYPE=error MSG="PAUSE IDLE_TIMEOUT should be a valid integer not equal to 0. (could be positive or negative)"
      {% elif idle_timeout_new != idle_timeout_old %}
        {% if idle_timeout_new < 0 %}
          _DISABLE_IDLE_TIMEOUT
        {% endif %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_timeout VALUE={idle_timeout_old}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_timeout_state VALUE={idle_timeout_old_state}
        SET_IDLE_TIMEOUT TIMEOUT={idle_timeout_new}
      {% endif %}
    {% endif %}

    # executing pause
    SAVE_GCODE_STATE NAME=gcodeState_PAUSE_RESUME
    PAUSE_BASE
    _RETRACT_IF_HOT LENGTH={retract_length} SPEED={retract_speed}
    {% if params.SPEED and params.SPEED|float != 0 %}
      {% set speed = params.SPEED|float|abs %}
      _GO_IF_HOMED Z={park_z} SPEED={speed}
      _GO_IF_HOMED X={park_x} Y={park_y} SPEED={speed}
    {% else %}
      _GO_IF_HOMED Z={park_z}
      _GO_IF_HOMED X={park_x} Y={park_y}
    {% endif %}

    # set values for RESUME
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=unretract_length VALUE={retract_length}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=unretract_speed VALUE={defaults.unretract_speed}
    {% if params.SPEED and params.SPEED|float != 0 %}
      {% set speed = params.SPEED|float|abs %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=return_speed_move VALUE={speed}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=gcode_state_available VALUE=True
    

  {% else %}
    RESPOND TYPE=error MSG="Pause/Resume feature not enabled in printer.cfg."
  {% endif %}
description: "Pause the actual running print and park the toolhead. Set IDLE_TIMEOUT to -1 to disable it."
rename_existing: PAUSE_BASE

# RESUME VELOCITY=<value>
[gcode_macro RESUME]
variable_idle_timeout: -1
variable_idle_timeout_state: True

variable_filament_changed: False
variable_load_length: -1
variable_load_speed: -1
variable_extrude_length: -1
variable_extrude_speed: -1

variable_gcode_state_available: False
variable_unretract_length: -1
variable_unretract_speed: -1

variable_return_speed_move: -1

gcode:
  {% if printer.configfile.settings.pause_resume %}
    {% if printer.pause_resume.is_paused %}
      {% if gcode_state_available %} # advanced features enabled

        # restore idle timeout
        {% if printer.configfile.settings.idle_timeout and idle_timeout > 0 %}
          {% if idle_timeout_state %}
            SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
          {% else %}
            SET_IDLE_TIMEOUT TIMEOUT={idle_timeout} KEEP_IDLE_TIMEOUT_DISABLED="True"
          {% endif %}
        {% endif %}

        # filament change
        {% if filament_changed and load_length > 0 and load_speed > 0 and extrude_length > 0 and extrude_speed > 0 %}
          _WAIT_TEMP_EXTRUDE LENGTH={load_length} SPEED={load_speed} # load filament
          _EXTRUDE_IF_HOT LENGTH={extrude_length} SPEED={extrude_speed} # purge filament
          _RETRACT_IF_HOT LENGTH={unretract_length} SPEED={printer["gcode_macro _VARIABLE_DEFAULTS"].retract_speed} # retract
          G4 P100
          M117 Remove leftover filament from nozzle
          RESPOND MSG="Remove leftover filament from nozzle"
          
          # wait 60 seconds
          G4 P{30 * 1000} 
          M117 30 seconds left
          G4 P{10 * 1000}
          M117 20 seconds left
          G4 P{10 * 1000}
          M117 10 seconds left
          G4 P{5 * 1000}
          M117 5 seconds left
          G4 P{2 * 1000}
          M117 3 seconds left
          G4 P{1 * 1000}
          M117 2 seconds left
          G4 P{1 * 1000}
          M117 1 second left
          G4 P{1 * 1000}
        {% endif %}

        # restore extruder motor position
        {% if unretract_length > 0  and unretract_speed > 0 %}
          _EXTRUDE_IF_HOT LENGTH={unretract_length} SPEED={unretract_speed}
        {% endif %}

        # check VELOCITY parameter
        {% if params.VELOCITY and params.VELOCITY|float != 0 %}
          {% set return_speed_move = params.VELOCITY|float %}
        {% endif %}

        # resume 
        {% if return_speed_move > 0 %}
          RESUME_BASE VELOCITY={return_speed_move}
        {% else %}
          RESUME_BASE
        {% endif %}

        M117 Printing...

        RESTORE_GCODE_STATE NAME=gcodeState_PAUSE_RESUME
      {% else %}
        RESUME_BASE
      {% endif %}
      # reset RESUME variables
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_timeout VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_timeout_state VALUE=True

      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=filament_changed VALUE=False
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=load_length VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=load_speed VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_length VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_speed VALUE=-1

      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=gcode_state_available VALUE=False
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=unretract_length VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=unretract_speed VALUE=-1

      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=return_speed_move VALUE=-1
    {% else %}
      RESPOND TYPE=error MSG="Printer is not paused."
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="Pause/Resume feature not enabled in printer.cfg."
  {% endif %}
description: "Resume the actual running print."
rename_existing: RESUME_BASE

# CLEAR_PAUSE SUPPRESS_NOT_PAUSED_ERROR="True" or any other value for False
[gcode_macro CLEAR_PAUSE]
gcode:
  {% if printer.configfile.settings.pause_resume %}
    {% if printer.pause_resume.is_paused %}
      {% if printer["gcode_macro RESUME"].gcode_state_available %}
        # restore idle timeout
        {% set idle_timeout = printer["gcode_macro RESUME"].idle_timeout %}
        {% set idle_timeout_state = printer["gcode_macro RESUME"].idle_timeout_state %}
        {% if printer.configfile.settings.idle_timeout and idle_timeout > 0 %}
          {% if idle_timeout_state %}
            SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
          {% else %}
            SET_IDLE_TIMEOUT TIMEOUT={idle_timeout} KEEP_IDLE_TIMEOUT_DISABLED="True"
          {% endif %}
        {% endif %}
      {% endif %}

      # reset RESUME variables
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_timeout VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_timeout_state VALUE=True

      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=filament_changed VALUE=False
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=load_length VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=load_speed VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_length VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extrude_speed VALUE=-1

      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=gcode_state_available VALUE=False
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=unretract_length VALUE=-1
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=unretract_speed VALUE=-1

      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=return_speed_move VALUE=-1

      CLEAR_PAUSE_BASE
    {% else %}
      {% if not (params.SUPPRESS_NOT_PAUSED_ERROR and params.SUPPRESS_NOT_PAUSED_ERROR == "True") %}
        RESPOND TYPE=error MSG="Printer is not paused."        
      {% endif %}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG="Pause/Resume feature not enabled in printer.cfg."
  {% endif %}
description: "Clear the pause state without resuming the print."
rename_existing: CLEAR_PAUSE_BASE

# CANCEL_PRINT X=<value> Y=<value> DZ=<value> E=<value> Z_MIN=<value> SPEED_MOVE=<value>
[gcode_macro CANCEL_PRINT]
gcode:
  # getting parameters
  {% set defaults = printer["gcode_macro _VARIABLE_DEFAULTS"] %}
  {% set park_x = params.X|default(defaults.park_position[0])|float %}
  {% set park_y = params.Y|default(defaults.park_position[1])|float %}
  {% set park_dz = params.DZ|default(defaults.pause_dz)|float %}
  {% set retract_length = params.E|default(defaults.retract_length)|float|abs %}
  {% set retract_speed = defaults.retract_speed|float %}
  {% set park_z_min = params.Z_MIN|default(defaults.park_position[2])|float %}

  # calculating parameters
  {% set park_z = [ ([ printer.toolhead.position.z + park_dz, printer.toolhead.axis_maximum.z ]|min), park_z_min ]|max %}
  
  # executing cancel print
  _RETRACT_IF_HOT LENGTH={retract_length} SPEED={retract_speed}
  {% if params.SPEED and params.SPEED|float != 0 %}
    {% set speed = params.SPEED|float|abs %}
    _GO_IF_HOMED Z={park_z} SPEED={speed}
    _GO_IF_HOMED X={park_x} Y={park_y} SPEED={speed}
  {% else %}
    _GO_IF_HOMED Z={park_z}
    _GO_IF_HOMED X={park_x} Y={park_y}
  {% endif %}

  CLEAR_PAUSE SUPPRESS_NOT_PAUSED_ERROR="True"
  
  TURN_OFF_HEATERS
  M84
  M107
  CANCEL_PRINT_BASE
description: "Cancel the actual running print"
rename_existing: CANCEL_PRINT_BASE


# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}


