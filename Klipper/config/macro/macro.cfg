
# SMART_HOME
[gcode_macro SMART_HOME]
gcode:
    {% if printer.toolhead.homed_axes == "" or printer.toolhead.homed_axes == null %}
        G28 
    {% elif printer.toolhead.homed_axes == "x" %}
        G28 YZ
    {% elif printer.toolhead.homed_axes == "y" %}
        G28 XZ
    {% elif printer.toolhead.homed_axes == "z" %}
        G28 XY
    {% elif printer.toolhead.homed_axes == "xy" or printer.toolhead.homed_axes == "yx" %}
        G28 Z
    {% elif printer.toolhead.homed_axes == "xz" or printer.toolhead.homed_axes == "zx" %}
        G28 Y
    {% elif printer.toolhead.homed_axes == "yz" or printer.toolhead.homed_axes == "zy"%}
        G28 X
    {% endif %}
description: "Home all axis not yet homed."


# GO_SAFE_POSITION X=<value> Y=<value> Z=<value> TRAVEL_SPEED=<value> H=0/1
[gcode_macro GO_SAFE_POSITION]
variable_default_x: 110.0 # mm
variable_default_y: 110.0 # mm
variable_default_z: 80.0 # mm
variable_default_travel_speed: 50.0 # mm/s # z travel speed will be half of this
variable_default_h: 0
gcode:
    {% set h = params.H|default(default_h)|float %}
    {% if printer.toolhead.homed_axes == "xyz" or printer.toolhead.homed_axes == "xzy" or printer.toolhead.homed_axes == "yxz" or printer.toolhead.homed_axes == "yzx"  or printer.toolhead.homed_axes == "zxy" or printer.toolhead.homed_axes == "zyx" or h == 1 %}
        {% if h == 1 %}
            SMART_HOME
        {% endif %}
        {% set x = params.X|default(default_x)|float %}
        {% set y = params.Y|default(default_y)|float %}
        {% set z = params.Z|default(default_z)|float %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        SAVE_GCODE_STATE NAME=gcodeState_GO_SAFE_POSITION
        G90
        G0 Z{z} F{travel_speed*30}
        G0 X{x} Y{y} F{travel_speed*60}
        RESTORE_GCODE_STATE NAME=gcodeState_GO_SAFE_POSITION
    {% else %}
        RESPOND TYPE=error MSG="Cannot go to safe position, toolhead not homed on all axis and H parameter set to 0."
    {% endif %}
description: "Go to safe position. H=1 will home all axis before moving."

# PAUSE X=<value> Y=<value> Z=<value> E=<value> Z_MIN=<value> RESTORE=[0|1]
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_idle_timeout: 0
gcode:
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

# RESUME VELOCITY=<value>
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
# variable_speed_move: 50 # if not defined, it will use the recover_velocity
variable_runout_sensor_name: "" # If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected. Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
gcode:
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = speed_move|default(velocity) * 60 %}
  {% set runout_resume = True if runout_sensor_name == ""                 # no runout sensor
                    else True if not printer[runout_sensor_name].enabled  # sensor is disabled
                    else printer[runout_sensor_name].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (runout_sensor_name.split(" "))[1]}'
  {% endif %}

# CANCLE_PRINT
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park_at_cancel: True
variable_cancel_retract: 5.0
variable_park_at_cancel_x: 0 # none to disable
variable_park_at_cancel_y: 0 # none to disable
gcode:
  {% set allow_park = park_at_cancel|lower == 'true' %}
  {% set retract = cancel_retract|abs %}
  {% set park_x = "" if (park_at_cancel_x is none)
            else "X=" ~ park_at_cancel_x %}
  {% set park_y = "" if (park_at_cancel_y is none)
            else "Y=" ~ park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}


