# from OrcaSlicer: 
# SET_PRINT_STATS_INFO [TOTAL_LAYER={total_layer_count}]
# START_PRINT BED_TEMP={bed_temperature_initial_layer[initial_extruder]} EXTRUDER_TEMP={first_layer_temperature[initial_extruder]} TRAVEL_SPEED={initial_layer_travel_speed} RETRACTION_LENGHT={retraction_length[0]} RETRACTION_SPEED={retraction_speed[0]} INPUT_FILENAME_BASE={input_filename_base}

# START_PRINT BED_TEMP=<value> EXTRUDER_TEMP=<value> TRAVEL_SPEED=<value> RETRACTION_LENGHT=<value> RETRACTION_SPEED=<value> INPUT_FILENAME_BASE=<value>
[gcode_macro _START_PRINT]
variable_purge_lenght: 50.0 # mm
variable_purge_speed: 2.0 # mm/s
variable_default_file_name: "noname"
variable_default_travel_speed: 100.0 # mm/s
variable_default_retraction_lenght: 3.5 # mm
variable_default_retraction_speed: 40.0 # mm/s
# rename_existing:
gcode:
    {% if params.BED_TEMP != null and params.EXTRUDER_TEMP != null %}
        {% set bed_temp = params.BED_TEMP|float %}
        {% set extruder_temp = params.EXTRUDER_TEMP|float %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        {% set retraction_lenght = params.RETRACTION_LENGHT|default(default_retraction_lenght)|float %}
        {% set retraction_speed = params.RETRACTION_SPEED|default(default_retraction_speed)|float %}
        {% set file_name = params.INPUT_FILENAME_BASE|default(default_file_name) %}
        G28 # always home all axis
        _GO_HEATING_POINT TRAVEL_SPEED={travel_speed}
        M140 S{bed_temp}	
        M104 S{extruder_temp}
        M109 S{extruder_temp}
        M190 S{bed_temp}
        _CLEAN_NOZZLE_INITIAL TRAVEL_SPEED={travel_speed} RETRACTION_LENGHT={retraction_lenght} RETRACTION_SPEED={retraction_speed} PURGE_LENGHT={purge_lenght} PURGE_SPEED={purge_speed}
        G90 # set absolute positioning while printing
        BED_MESH_PROFILE LOAD="default"
        M117 Printing {input_filename_base}...
    {% else %}
        RESPOND TYPE=error MSG="Cannot start printing, missing temperature parameters."
    {% endif %}
description: "Home all axis, set bed and hotend temp, purge extruder, reset extruder position and finally start printing."


# _CLEAN_NOZZLE_INITIAL TRAVEL_SPEED=<value> RETRACTION_LENGHT=<value> RETRACTION_SPEED=<value> PURGE_LENGHT=<value> PURGE_SPEED=<value>
[gcode_macro _CLEAN_NOZZLE_INITIAL]
variable_axis: "Y" # axis where perform the cleaning
variable_default_start_point: [5, 30, 0.4] # if error while calculating
variable_default_end_position: 100.0 # if error while calculating
variable_default_offset: 0.4 # mm if error while calculating
variable_default_travel_speed: 100.0 # mm/s
variable_default_retraction_lenght: 3.5 # mm
variable_default_retraction_speed: 40.0 # mm/s
variable_default_purge_lenght: 50.0 # mm
variable_default_purge_speed: 2.0 # mm/s
gcode:
    {% if printer.extruder.target > printer.configfile.settings.extruder.min_extrude_temp %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        {% set retraction_lenght = params.RETRACTION_LENGHT|default(default_retraction_lenght)|float %}
        {% set retraction_speed = params.RETRACTION_SPEED|default(default_retraction_speed)|float %}
        {% set purge_lenght = params.PURGE_LENGHT|default(default_purge_lenght)|float %}
        {% set purge_speed = params.PURGE_SPEED|default(default_purge_speed)|float %}
        {% if printer.configfile.settings.extruder.nozzle_diameter == null %}
            {% set offset = default_offset %}
        {% else %}
            {% set offset = printer.configfile.settings.extruder.nozzle_diameter %}
        {% endif %}
        SAVE_GCODE_STATE NAME=gcodeState__CLEAN_NOZZLE_INITIAL
        _GO_HEATING_POINT TRAVEL_SPEED={travel_speed} # used as a start point for the cleaning process
        {% if printer.extruder.temperature < printer.configfile.settings.extruder.min_extrude_temp %}
            M117 Waiting for extruder to heat up...
            M109 S{printer.extruder.target}
        {% endif %}
        {% if printer.extruder.can_extrude %} # just to be sure
            M117 Purging extruder...
            G91
            G1 E{purge_lenght} F{purge_speed*60} # purge	
            G1 E-{retraction_lenght} F{retraction_speed*60} # retract a little
            G92 E0
            # depend on the position of the toolhead
            {% if printer.toolhead.position.x != null and printer.toolhead.axis_minimum.y != null and printer.toolhead.axis_maximum.y !=null %}
                {% set bed_size_y = printer.toolhead.axis_maximum.y - printer.toolhead.axis_minimum.y %}
                {% set start_point = [printer.toolhead.position.x, bed_size_y * 0.3, 0.4] %}
                {% set end_position = bed_size_y * 0.9 %}
            {% else %}
                {% set start_point = default_start_point %}
                {% set end_position = default_end_position %}
            {% endif %}
            _CLEANING_LINE TRAVEL_SPEED={travel_speed} OFFSET={offset} START_POINT_X={start_point[0]} START_POINT_Y={start_point[1]} START_POINT_Z={start_point[2]} END_POSITION={end_position} AXIS={axis}
            G0 Z2 F{travel_speed*15} # go up a little
        {% else %}
            RESPOND TYPE=error MSG="Cannot clean nozzle, extruder cannot extrude."
        {% endif %}
        RESTORE_GCODE_STATE NAME=gcodeState__CLEAN_NOZZLE_INITIAL
    {% else %}
        RESPOND TYPE=error MSG="Cannot clean nozzle, extruder is not hot enough."
    {% endif %}
description: "Clean nozzle at height 0.4 mm purging it and then travel in a straight line."

    

# _GO_HEATING_POINT TRAVEL_SPEED=<value>
[gcode_macro _GO_HEATING_POINT]
variable_default_heating_point: [5, 0, 30] # if error while calculating
variable_default_travel_speed: 100.0 # mm/s
gcode:
    {% if printer.toolhead.axis_minimum.x != null and printer.toolhead.axis_minimum.y != null %}
        {% set hp = [printer.toolhead.axis_minimum.x + 5, printer.toolhead.axis_minimum.y, 30] %}
    {% else %}
        {% set hp = default_heating_point %}
    {% endif %}
    {% if printer.toolhead.position.x != hp[0] or printer.toolhead.position.y != hp[1] or printer.toolhead.position.z != hp[2] %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        SAVE_GCODE_STATE NAME=gcodeState__GO_HEATING_POINT
        SMART_HOME
        G90
        G0 X{hp[0]} Y{hp[1]} Z{hp[2]} F{travel_speed*60}
        RESTORE_GCODE_STATE NAME=gcodeState__GO_HEATING_POINT
    {% endif %}
description: "Go to a pre-defined point to heat up the nozzle and the bed, it will be [min_x + 5, min_y, 30]."

# _CLEANING_LINE TRAVEL_SPEED=<value> OFFSET=<value> START_POINT=<value> END_POS=<value> AXIS="<value>"
[gcode_macro _CLEANING_LINE]
variable_default_offset: 0.4
variable_default_travel_speed: 100.0
gcode:
    {% set offset = params.OFFSET|default(default_offset)|float %}
    {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
    {% set start_point = [ params.START_POINT_X|float, params.START_POINT_Y|float, params.START_POINT_Z|float ] %}
    {% set end_position = params.END_POSITION|float %}
    {% set axis = params.AXIS %}
    {% if start_point != [0.0, 0.0, 0.0] and end_position != 0.0  and axis != null %}
        SAVE_GCODE_STATE NAME=gcodeState__CLEANING_LINE
        SMART_HOME
        G90
        # go to the start point
        G0 X{start_point[0]} Y{start_point[1]} F{travel_speed*60}
        G0 Z{start_point[2]} F{travel_speed*15} # slow down the z movement by a factor of 4
        {% if axis == "X" %}
            G0 X{end_position} F{travel_speed*60} # go to the end position on X coordinate
            G0 Y{start_point[1]+offset} F{travel_speed*60} # offset on Y
            G0 X{start_point[0]} F{travel_speed*60} # go back to the start point
        {% elif axis == "Y" %}
            G0 Y{end_position} F{travel_speed*60} # go to the end position on Y coordinate
            G0 X{start_point[0]+offset} F{travel_speed*60} # offset on X
            G0 Y{start_point[1]} F{travel_speed*60} # go back to the start point
        {% endif %}
        RESTORE_GCODE_STATE NAME=gcodeState__CLEANING_LINE
    {% else %}
        RESPOND TYPE=error MSG="Cannot clean nozzle, missing parameters."
    {% endif %}
description: "Clean nozzle by moving in a straight line and coming back. (if the parameter are: <travel_speed>, 0.4, [1, 2, 3], 4, "X", the trajectory will be [1, 2, ~]->[1, 2, 3]->[4, 2, 3]->[4, 2.4, 3]->[1, 2.4, 3])"

# from OrcaSlicer: 
# _END_PRINT TRAVEL_SPEED={travel_speed} RETRACTION_SPEED={retraction_speed[0]} INPUT_FILENAME_BASE={input_filename_base}

# _END_PRINT TRAVEL_SPEED=<value> RETRACTION_SPEED=<value> INPUT_FILENAME_BASE=<value>
[gcode_macro _END_PRINT]
variable_retraction_lenght: 30.0 # mm
variable_purge_lenght: 20.0 # mm
variable_purge_speed: 2.0 # mm/s
variable_elevation: 20.0 # mm
variable_default_file_name: "noname"
variable_default_travel_speed: 100.0 # mm/s
variable_default_retraction_speed: 40.0 # mm/s
gcode:
    {% if printer.toolhead.homed_axes == "xyz" or printer.toolhead.homed_axes == "xzy" or printer.toolhead.homed_axes == "yxz" or printer.toolhead.homed_axes == "yzx"  or printer.toolhead.homed_axes == "zxy" or printer.toolhead.homed_axes == "zyx" %}
        {% set travel_speed = params.TRAVEL_SPEED|default(default_travel_speed)|float %}
        {% set retraction_speed = params.RETRACTION_SPEED|default(default_retraction_speed)|float %}
        {% set file_name = params.INPUT_FILENAME_BASE|default(default_file_name) %}
        # to be converted from marlin
        M117 Finishing {file_name}...
        {% if printer.toolhead.position.z < printer.toolhead.axis_maximum.z %}
            {% if printer.toolhead.position.z < printer.toolhead.axis_maximum.z - elevation %}
                G0 Z{printer.toolhead.position.z + elevation} F{travel_speed*15}
            {% else %}
                G0 Z{printer.toolhead.axis_maximum.z} F{travel_speed*15}
            {% endif %}
        {% endif %}
        G0 X0 Y0 F{travel_speed*60} # go to origin
        {% if printer.extruder.can_extrude %}
            G91
            G1 E{purge_lenght} F{purge_speed*60} # purge
            G1 E-{retraction_lenght} F{retraction_speed*60} # retract
        {% endif %}
        TURN_OFF_HEATERS
        PRESENT_PARTS TRAVEL_SPEED={travel_speed}
        M84 # disable all motors
        M107 # disable fans
        M117 Done {file_name} in {printer.print_stats.total_duration}!
    {% else %}
        RESPOND TYPE=error MSG="Cannot end printing, toolhead not homed on all axis."
    {% endif %}
description: "Finish printing, turn off heaters, move to origin, disable fans, retract, present parts, disable motors and display message."